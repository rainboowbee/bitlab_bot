// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  enrolledCourses Course[] @relation("EnrolledCourses")
  createdCourses Course[] @relation("CreatedCourses")
  activities    UserTaskActivity[]
  isAdmin       Boolean @default(false)
  userVariantActivities UserVariantActivity[]
}

model Course {
  id          String    @id @default(cuid())
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  creator     User      @relation("CreatedCourses", fields: [creatorId], references: [id])
  creatorId   String
  students    User[]    @relation("EnrolledCourses")
  lessons     Lesson[]
}

model Lesson {
  id          String    @id @default(cuid())
  title       String
  content     String
  order       Int
  course      Course    @relation(fields: [courseId], references: [id])
  courseId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String
  maxPoints   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  activities  UserTaskActivity[]
  files       Json?
  answer      String?
  solution    String?
  sectionNumber Int?
  variants    Variant[] @relation("VariantTasks")
}

model UserTaskActivity {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  task       Task     @relation(fields: [taskId], references: [id])
  taskId     String
  completedAt DateTime @default(now())
  score      Int
}

model Variant {
  id            String    @id @default(cuid())
  variantNumber Int       @unique
  name          String?
  description   String?
  difficulty    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tasks         Task[]    @relation("VariantTasks")
  userActivities UserVariantActivity[]
}

model UserVariantActivity {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  variant       Variant   @relation(fields: [variantId], references: [id])
  variantId     String
  completedAt   DateTime  @default(now())
  score         Int
  attemptNumber Int

  @@unique([userId, variantId, attemptNumber])
}
